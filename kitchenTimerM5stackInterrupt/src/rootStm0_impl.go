// This file was generated by a program.
package mypackage

// package names to be imported

///////////////////////////////////////////////
// functions for State rootStm0AlarmOn
///////////////////////////////////////////////

func rootStm0AlarmOnEntry() {
	if debug {
		logger.Println("Entering State rootStm0AlarmOn")
	}
	alarm.Beep()
}

func rootStm0AlarmOnDo() {
	// Please write a do process for State rootStm0AlarmOn
}

func rootStm0AlarmOnExit() {
	if debug {
		logger.Println("Leaving State rootStm0AlarmOn")
	}
	alarm.Mute()
}

///////////////////////////////////////////////
// functions for State rootStm0Countdown
///////////////////////////////////////////////

func rootStm0CountdownEntry() {
	if debug {
		logger.Println("Entering State rootStm0Countdown")
	}
	// Please write an enter process for State rootStm0Countdown
}

func rootStm0CountdownDo() {
	// count++

	// if count == countSecond {
	// 	countDown()
	// 	count = 0
	// }

	// timer interruptの実装
	// 参考URL：https://qiita.com/sago35/items/75537e78f06c86a5a77b

	go timer1s(chCnt1)
	logger.Println("--impl.go-- go timer1s() Start!")
	go pushStartStopChan(chCnt2)
	logger.Println("--impl.go-- go pushRbuttonChan() Start!")

	for {
		select {
		case <-chCnt1:
			logger.Println("--impl.go-- timer1s true receive!")
			countDown()
			return

			if ss == 0 && mm == 0 {
				logger.Println("--impl.go-- countDown End!")
				return
			}
		case <-chCnt2:
			logger.Println("--impl.go-- pushRbutton true receive!")
			return
		default:
			// logger.Println("--impl.go-- default")
			// nothing to do
		}
	}
}

func rootStm0CountdownExit() {
	if debug {
		logger.Println("Leaving State rootStm0Countdown")
	}
	// Please write an exit process for State rootStm0Countdown
}

///////////////////////////////////////////////
// functions for State rootStm0TimerSet
///////////////////////////////////////////////

func rootStm0TimerSetEntry() {
	if debug {
		logger.Println("Entering State rootStm0TimerSet")
	}
	// Please write an enter process for State rootStm0TimerSet
}

func rootStm0TimerSetDo() {
	if !buttonL.Get() && inputEnabledL {
		inputEnabledL = false
		addMinute()
	} else if buttonL.Get() {
		inputEnabledL = true
	}

	if !buttonM.Get() && inputEnabledM {
		inputEnabledM = false
		addSecond()
	} else if buttonM.Get() {
		inputEnabledM = true
	}
}

func rootStm0TimerSetExit() {
	if debug {
		logger.Println("Leaving State rootStm0TimerSet")
	}
	// Please write an exit process for State rootStm0TimerSet
}

///////////////////////////////////////////////
// functions for State rootStm0Idle
///////////////////////////////////////////////

func rootStm0IdleEntry() {
	if debug {
		logger.Println("Entering State rootStm0Idle")
	}
	// Please write an enter process for State rootStm0Idle
}

func rootStm0IdleDo() {
	// Please write a do process for State rootStm0Idle
}

func rootStm0IdleExit() {
	if debug {
		logger.Println("Leaving State rootStm0Idle")
	}
	// Please write an exit process for State rootStm0Idle
}

///////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////

func rootStm0AlarmOnAlarmOffCond() bool {
	return !rRelease
}

func rootStm0CountdownEndCond() bool {
	return (ss == 0 && mm == 0)
}

func rootStm0CountdownStopCond() bool {
	if !buttonR.Get() && inputEnabledR {
		inputEnabledR = false
		return true
	} else if buttonR.Get() {
		inputEnabledR = true
	}
	return false
}

func rootStm0TimerSetStartCond() bool {
	if !buttonR.Get() && inputEnabledR {
		inputEnabledR = false
		return true
	} else if buttonR.Get() {
		inputEnabledR = true
	}
	return false
}

func rootStm0IdleSetTimeCond() bool {
	return (!lRelease || !mRelease)
}

///////////////////////////////////////////////
// Actions
///////////////////////////////////////////////

func rootStm0AlarmOnAlarmOffAction() {
	// Please edit the action when AlarmOff occurs at State AlarmOn
}

func rootStm0CountdownEndAction() {
	// Please edit the action when End occurs at State Countdown
}

func rootStm0CountdownStopAction() {
	// Please edit the action when Stop occurs at State Countdown
}

func rootStm0TimerSetStartAction() {
	// Please edit the action when Start occurs at State TimerSet
}

func rootStm0IdleSetTimeAction() {
	// Please edit the action when SetTime occurs at State Idle
}

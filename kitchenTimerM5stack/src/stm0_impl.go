// This file was generated by a program.
package mypackage

import "fmt"

// package names to be imported

///////////////////////////////////////////////
// functions for State AlarmOn
///////////////////////////////////////////////

func AlarmOnEntry() {
	if debug {
		logger.Println("Entering State AlarmOn")
	}
	// Please write an enter process for State AlarmOn
	alarm.Beep()
}

func AlarmOnDo() {
	// Please write a do process for State AlarmOn
}

func AlarmOnExit() {
	if debug {
		logger.Println("Leaving State AlarmOn")
	}
	// Please write an exit process for State AlarmOn
	alarm.Mute()
}

///////////////////////////////////////////////
// functions for State Countdown
///////////////////////////////////////////////

func countDown() {
	ss--
	if ss == -1 {
		if mm == 0 {
			ss = 0
		} else {
			ss = 59
			mm--
		}
	}

	if ss%2 == 1 {
		display.PrintVal(fmt.Sprintf("%02d : %02d", mm, ss))
	} else {
		display.PrintVal(fmt.Sprintf("%02d   %02d", mm, ss))
	}
}

func CountdownEntry() {
	if debug {
		logger.Println("Entering State Countdown")
	}
	// Please write an enter process for State Countdown
}

func CountdownDo() {
	// Please write a do process for State Countdown
	count++

	if count == countSecond {
		countDown()
		count = 0
	}
}

func CountdownExit() {
	if debug {
		logger.Println("Leaving State Countdown")
	}
	// Please write an exit process for State Countdown
}

///////////////////////////////////////////////
// functions for State TimerSet
///////////////////////////////////////////////

func displayTimerSet() {
	display.PrintVal(fmt.Sprintf("%02d : %02d", mm, ss))
}

func addMinute() {
	mm++
	if mm == 60 {
		mm = 0
	}
}

func addSecond() {
	ss++
	if ss == 60 {
		ss = 0
	}
}

func TimerSetEntry() {
	if debug {
		logger.Println("Entering State TimerSet")
	}
	// Please write an enter process for State TimerSet
}

func TimerSetDo() {
	if !buttonL.Get() && inputEnabledL {
		inputEnabledL = false
		addMinute()
		displayTimerSet()
	} else if buttonL.Get() {
		inputEnabledL = true
	}

	if !buttonM.Get() && inputEnabledM {
		inputEnabledM = false
		addSecond()
		displayTimerSet()
	} else if buttonM.Get() {
		inputEnabledM = true
	}
}

func TimerSetExit() {
	if debug {
		logger.Println("Leaving State TimerSet")
	}
	// Please write an exit process for State TimerSet
}

///////////////////////////////////////////////
// functions for State Idle
///////////////////////////////////////////////

func initialize() {
	display.PrintVal("00 : 00")
}

func IdleEntry() {
	if debug {
		logger.Println("Entering State Idle")
	}
	initialize()
}

func IdleDo() {
	// Please write a do process for State Idle
}

func IdleExit() {
	if debug {
		logger.Println("Leaving State Idle")
	}
	// Please write an exit process for State Idle
}

///////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////

func AlarmOffCond() bool {
	return !buttonR.Get()
}

func EndCond() bool {
	return (ss == 0 && mm == 0)
}

func StopCond() bool {
	if !buttonR.Get() && inputEnabledR {
		inputEnabledR = false
		return true
	} else if buttonR.Get() {
		inputEnabledR = true
	}
	return false
}

func StartCond() bool {
	if !buttonR.Get() && inputEnabledR {
		inputEnabledR = false
		return true
	} else if buttonR.Get() {
		inputEnabledR = true
	}
	return false
}

func SetTimeCond() bool {
	return (!buttonL.Get() || !buttonM.Get())
}

///////////////////////////////////////////////
// Actions
///////////////////////////////////////////////

func AlarmOffAction() {
	// Please edit the action when AlarmOff occurs
}

func EndAction() {
	// Please edit the action when End occurs
}

func StopAction() {
	// Please edit the action when Stop occurs
}

func StartAction() {
	// Please edit the action when Start occurs
}

func SetTimeAction() {
	// Please edit the action when SetTime occurs
}
